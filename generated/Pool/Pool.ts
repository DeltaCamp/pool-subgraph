// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposited extends EthereumEvent {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SponsorshipDeposited extends EthereumEvent {
  get params(): SponsorshipDeposited__Params {
    return new SponsorshipDeposited__Params(this);
  }
}

export class SponsorshipDeposited__Params {
  _event: SponsorshipDeposited;

  constructor(event: SponsorshipDeposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AdminAdded extends EthereumEvent {
  get params(): AdminAdded__Params {
    return new AdminAdded__Params(this);
  }
}

export class AdminAdded__Params {
  _event: AdminAdded;

  constructor(event: AdminAdded) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AdminRemoved extends EthereumEvent {
  get params(): AdminRemoved__Params {
    return new AdminRemoved__Params(this);
  }
}

export class AdminRemoved__Params {
  _event: AdminRemoved;

  constructor(event: AdminRemoved) {
    this._event = event;
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Withdrawn extends EthereumEvent {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Opened extends EthereumEvent {
  get params(): Opened__Params {
    return new Opened__Params(this);
  }
}

export class Opened__Params {
  _event: Opened;

  constructor(event: Opened) {
    this._event = event;
  }

  get drawId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeBeneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get secretHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get feeFraction(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Committed extends EthereumEvent {
  get params(): Committed__Params {
    return new Committed__Params(this);
  }
}

export class Committed__Params {
  _event: Committed;

  constructor(event: Committed) {
    this._event = event;
  }

  get drawId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Rewarded extends EthereumEvent {
  get params(): Rewarded__Params {
    return new Rewarded__Params(this);
  }
}

export class Rewarded__Params {
  _event: Rewarded;

  constructor(event: Rewarded) {
    this._event = event;
  }

  get drawId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get entropy(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get winnings(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NextFeeFractionChanged extends EthereumEvent {
  get params(): NextFeeFractionChanged__Params {
    return new NextFeeFractionChanged__Params(this);
  }
}

export class NextFeeFractionChanged__Params {
  _event: NextFeeFractionChanged;

  constructor(event: NextFeeFractionChanged) {
    this._event = event;
  }

  get feeFraction(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NextFeeBeneficiaryChanged extends EthereumEvent {
  get params(): NextFeeBeneficiaryChanged__Params {
    return new NextFeeBeneficiaryChanged__Params(this);
  }
}

export class NextFeeBeneficiaryChanged__Params {
  _event: NextFeeBeneficiaryChanged;

  constructor(event: NextFeeBeneficiaryChanged) {
    this._event = event;
  }

  get feeBeneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Pool__getDrawResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Bytes;

  constructor(value0: BigInt, value1: Address, value2: BigInt, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromFixedBytes(this.value3));
    return map;
  }
}

export class Pool extends SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  accountedBalance(): BigInt {
    let result = super.call("accountedBalance", []);
    return result[0].toBigInt();
  }

  nextFeeFraction(): BigInt {
    let result = super.call("nextFeeFraction", []);
    return result[0].toBigInt();
  }

  cToken(): Address {
    let result = super.call("cToken", []);
    return result[0].toAddress();
  }

  nextFeeBeneficiary(): Address {
    let result = super.call("nextFeeBeneficiary", []);
    return result[0].toAddress();
  }

  currentOpenDrawId(): BigInt {
    let result = super.call("currentOpenDrawId", []);
    return result[0].toBigInt();
  }

  currentCommittedDrawId(): BigInt {
    let result = super.call("currentCommittedDrawId", []);
    return result[0].toBigInt();
  }

  getDraw(_drawId: BigInt): Pool__getDrawResult {
    let result = super.call("getDraw", [
      EthereumValue.fromUnsignedBigInt(_drawId)
    ]);
    return new Pool__getDrawResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBytes()
    );
  }

  committedBalanceOf(_addr: Address): BigInt {
    let result = super.call("committedBalanceOf", [
      EthereumValue.fromAddress(_addr)
    ]);
    return result[0].toBigInt();
  }

  openBalanceOf(_addr: Address): BigInt {
    let result = super.call("openBalanceOf", [
      EthereumValue.fromAddress(_addr)
    ]);
    return result[0].toBigInt();
  }

  balanceOf(_addr: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(_addr)]);
    return result[0].toBigInt();
  }

  balanceOfSponsorship(_addr: Address): BigInt {
    let result = super.call("balanceOfSponsorship", [
      EthereumValue.fromAddress(_addr)
    ]);
    return result[0].toBigInt();
  }

  calculateWinner(_entropy: Bytes): Address {
    let result = super.call("calculateWinner", [
      EthereumValue.fromFixedBytes(_entropy)
    ]);
    return result[0].toAddress();
  }

  committedSupply(): BigInt {
    let result = super.call("committedSupply", []);
    return result[0].toBigInt();
  }

  estimatedInterestRate(_blocks: BigInt): BigInt {
    let result = super.call("estimatedInterestRate", [
      EthereumValue.fromUnsignedBigInt(_blocks)
    ]);
    return result[0].toBigInt();
  }

  supplyRatePerBlock(): BigInt {
    let result = super.call("supplyRatePerBlock", []);
    return result[0].toBigInt();
  }

  isAdmin(_admin: Address): boolean {
    let result = super.call("isAdmin", [EthereumValue.fromAddress(_admin)]);
    return result[0].toBoolean();
  }

  balance(): BigInt {
    let result = super.call("balance", []);
    return result[0].toBigInt();
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _cToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feeFraction(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _feeBeneficiary(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class OpenNextDrawCall extends EthereumCall {
  get inputs(): OpenNextDrawCall__Inputs {
    return new OpenNextDrawCall__Inputs(this);
  }

  get outputs(): OpenNextDrawCall__Outputs {
    return new OpenNextDrawCall__Outputs(this);
  }
}

export class OpenNextDrawCall__Inputs {
  _call: OpenNextDrawCall;

  constructor(call: OpenNextDrawCall) {
    this._call = call;
  }

  get nextSecretHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class OpenNextDrawCall__Outputs {
  _call: OpenNextDrawCall;

  constructor(call: OpenNextDrawCall) {
    this._call = call;
  }
}

export class RewardAndOpenNextDrawCall extends EthereumCall {
  get inputs(): RewardAndOpenNextDrawCall__Inputs {
    return new RewardAndOpenNextDrawCall__Inputs(this);
  }

  get outputs(): RewardAndOpenNextDrawCall__Outputs {
    return new RewardAndOpenNextDrawCall__Outputs(this);
  }
}

export class RewardAndOpenNextDrawCall__Inputs {
  _call: RewardAndOpenNextDrawCall;

  constructor(call: RewardAndOpenNextDrawCall) {
    this._call = call;
  }

  get nextSecretHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get lastSecret(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RewardAndOpenNextDrawCall__Outputs {
  _call: RewardAndOpenNextDrawCall;

  constructor(call: RewardAndOpenNextDrawCall) {
    this._call = call;
  }
}

export class DepositSponsorshipCall extends EthereumCall {
  get inputs(): DepositSponsorshipCall__Inputs {
    return new DepositSponsorshipCall__Inputs(this);
  }

  get outputs(): DepositSponsorshipCall__Outputs {
    return new DepositSponsorshipCall__Outputs(this);
  }
}

export class DepositSponsorshipCall__Inputs {
  _call: DepositSponsorshipCall;

  constructor(call: DepositSponsorshipCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositSponsorshipCall__Outputs {
  _call: DepositSponsorshipCall;

  constructor(call: DepositSponsorshipCall) {
    this._call = call;
  }
}

export class DepositPoolCall extends EthereumCall {
  get inputs(): DepositPoolCall__Inputs {
    return new DepositPoolCall__Inputs(this);
  }

  get outputs(): DepositPoolCall__Outputs {
    return new DepositPoolCall__Outputs(this);
  }
}

export class DepositPoolCall__Inputs {
  _call: DepositPoolCall;

  constructor(call: DepositPoolCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositPoolCall__Outputs {
  _call: DepositPoolCall;

  constructor(call: DepositPoolCall) {
    this._call = call;
  }
}

export class WithdrawSponsorshipCall extends EthereumCall {
  get inputs(): WithdrawSponsorshipCall__Inputs {
    return new WithdrawSponsorshipCall__Inputs(this);
  }

  get outputs(): WithdrawSponsorshipCall__Outputs {
    return new WithdrawSponsorshipCall__Outputs(this);
  }
}

export class WithdrawSponsorshipCall__Inputs {
  _call: WithdrawSponsorshipCall;

  constructor(call: WithdrawSponsorshipCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawSponsorshipCall__Outputs {
  _call: WithdrawSponsorshipCall;

  constructor(call: WithdrawSponsorshipCall) {
    this._call = call;
  }
}

export class WithdrawPoolCall extends EthereumCall {
  get inputs(): WithdrawPoolCall__Inputs {
    return new WithdrawPoolCall__Inputs(this);
  }

  get outputs(): WithdrawPoolCall__Outputs {
    return new WithdrawPoolCall__Outputs(this);
  }
}

export class WithdrawPoolCall__Inputs {
  _call: WithdrawPoolCall;

  constructor(call: WithdrawPoolCall) {
    this._call = call;
  }
}

export class WithdrawPoolCall__Outputs {
  _call: WithdrawPoolCall;

  constructor(call: WithdrawPoolCall) {
    this._call = call;
  }
}

export class SetNextFeeFractionCall extends EthereumCall {
  get inputs(): SetNextFeeFractionCall__Inputs {
    return new SetNextFeeFractionCall__Inputs(this);
  }

  get outputs(): SetNextFeeFractionCall__Outputs {
    return new SetNextFeeFractionCall__Outputs(this);
  }
}

export class SetNextFeeFractionCall__Inputs {
  _call: SetNextFeeFractionCall;

  constructor(call: SetNextFeeFractionCall) {
    this._call = call;
  }

  get _feeFraction(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNextFeeFractionCall__Outputs {
  _call: SetNextFeeFractionCall;

  constructor(call: SetNextFeeFractionCall) {
    this._call = call;
  }
}

export class SetNextFeeBeneficiaryCall extends EthereumCall {
  get inputs(): SetNextFeeBeneficiaryCall__Inputs {
    return new SetNextFeeBeneficiaryCall__Inputs(this);
  }

  get outputs(): SetNextFeeBeneficiaryCall__Outputs {
    return new SetNextFeeBeneficiaryCall__Outputs(this);
  }
}

export class SetNextFeeBeneficiaryCall__Inputs {
  _call: SetNextFeeBeneficiaryCall;

  constructor(call: SetNextFeeBeneficiaryCall) {
    this._call = call;
  }

  get _feeBeneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNextFeeBeneficiaryCall__Outputs {
  _call: SetNextFeeBeneficiaryCall;

  constructor(call: SetNextFeeBeneficiaryCall) {
    this._call = call;
  }
}

export class AddAdminCall extends EthereumCall {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class RemoveAdminCall extends EthereumCall {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class BalanceCall extends EthereumCall {
  get inputs(): BalanceCall__Inputs {
    return new BalanceCall__Inputs(this);
  }

  get outputs(): BalanceCall__Outputs {
    return new BalanceCall__Outputs(this);
  }
}

export class BalanceCall__Inputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }
}

export class BalanceCall__Outputs {
  _call: BalanceCall;

  constructor(call: BalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
